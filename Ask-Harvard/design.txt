Design Document for askHarvard
Max Shen (gshen@college.harvard.edu) 
Lucas Urbisaia (lucasurbisaia@college.harvard.edu)
ask-harvard.meteor.com

1. Why did we choose Meteor?
	As you can see from our source code and site url, we chose to build our site with Meteor, a relatively new node.js based platform. We chose Meteor due to a couple of reasons:
		- it allows us to use javascript for both client and server sides
		- it is automatically packaged with MongoDB, so we don't even have to configure a database manually
		- shallow learning curve, because there's no need to learn a new language like Ruby
		- functionalities such as username password login and facebook login can be added with a literally a single line of code
		- the website automatically detects changes in your code and instantly updates to reflect that
		- lots of built in security features such as hashed passwords, protection against CSRF attacks, HTML-escaped user input, and a full-database encryption layer

2. How We Got Started
	After watching Roger's seminar on Meteor, we realized that the source code for the example website that was handed out in the seminar could serve as a base for our website. The example was a To-Do List web app that had a single page where users can log in, input tasks via a text box, and have those tasks displayed in a list. This was a good foundation to start with, because our basic functionality was similar- users can log in, ask questions via a text box, and those questions will be displayed on the home page. 

3. Implementation of Features
	3.1 Adapting the example website
		First we changed all the HTML headings to what was relevant to our site. We then took out the function that allowed users to hide completed tasks, and the checkbox next to each task. We also changed the task counter to a question counter that counted the total number of questions submitted. Then we organized the directories into the folders client, server, lib (code here is accessible to both server and client; code that interacts with the database lives here), and public (images). 

	3.2 Password login and Email verification 
		By adding the accounts-password package, we had full login functionality with username, email, and password, and even a forgot password feature. All we had to do was choose the location of {{> loginButtons}}. To prevent users from registering with fake, or even worse, someone else's email, we added this feature using the pre built email  verification functions of meteor, and setting up the smtp settings in the server side code (server/smtp.js). All emails will be sent from a newly created gmail account, askharvard@gmail.com. We also customized the verification email by changing the From, Subject, and Text fields of the object Accounts.emailTemplates

	3.2 The Ask Anonymously function
		A key feature of Q&A websites like ask.fm and formspring is the ability to ask anonymous questions. We implemented this feature by selecting what types of imformation to store in our questions database depending on the status of the Ask Anonymously checkbox. If it was not checked, the question, the timestamp, the Id of the logged in user (returned by Meteor.userId(), a convenient feature of meteor), and the username of the logged in user (returned by Meteor.user().username) will be inserted into the database via meteor's insert function (similar to query in php). If it was checked, the username will be set to "Anonymous". In addition, an alert would pop up if someone tried to ask a question without logging in (Meteor.user() returns null when no one is logged in). 

	3.3 Creating multiple webpages and routing them
		We obviously want our website to be more than just one page, and to do that we needed to make use of a Meteor tool called Iron Router. Basically, you have a router.js file in the lib directory where you code in various routes that assign different html template files to different urls. We wanted to have a mainpage and a homepage, so we created mainpage.html and homepage.html and "routed" them to the urls '/' and '/homepage'. In addition, we wanted to have a navigation bar (with our logo and buttons for sign in, homepage, and the questions count) that would stay constant no matter which page we were on. Luckily meteor had a function for that as well. We created a file called layout.html that had the code for our navigation bar, and added that to the layoutTemplate field of the Router.configure object in router.js. In layout.html below the navigation bar, there is a {{> yield}} placeholder, which in meteor means the html template (in our case mainpage.html or homepage.html) that your url is routing to will load here. 

	3.4 Answering questions
		To allow users to answer questions, we created /lib/collections/answers.js in which we initialized a new database to store the answers. Then, we added an "Answer" button in the template for questions (in question.html). The button would be a link that takes you to another page to answer. We added a special route in router.js that routes this link to '/answer/:_id' in which :_id is the unique id of the question that was clicked on. This way we would have a unique url for each question. Next, we went about creating a whole bunch of html templates and their corresponding js files in the client directory:

			Answerpage.html: template for the page that the user is routed to after clicking the Answer button. This file has 3 placeholders- {{> question}} displays the one question that was clicked on, {{#each answers}}{{> answer}}{{each}} shows a list of any existing answers, and {{> answerSubmit}} is the form to submit a new answer.

			Answerpage.js: uses the find() function to search through the database for all answers that have the same questionId as the current question (thus finding all existing answers to the question) and passes it to {{#each answers}}.

			Answer.html: the template for each individual answer in the list (replaces the {{> answer}}. Displays the answerer's username, timstamp, and has a button to for deleting the answer. 

			Answer.js: has a helper function that passes the timestamp to Answer.html to display. Also has an event handler for the delete button that removes the answer from the database when clicked.

			answerSubmit.html: template for the form that goes in the placeholder {{> answerSubmit}}. 

			answerSubmit.js: has an event handler for the submission of the answer form. When the form is submitted, the code will check that the answer is not blank, and then call a meteor method (which we will write) to insert that answer into the answers database. After insertion, the answer will show up immediately on the page because the find() function in answerpage.js will instantly find it in the database and pass it to answerpage.html. 

		Next, we wrote a server side method in lib/collections/answers.js that inserts the answer along with the id of the question it's addressing, the user info of the answerer, and timestamp into the database. To write this, we borrowed snippets of code from https://www.discovermeteor.com/blog/meteor-methods-client-side-operations/. Finally, we have written all the code for people to answer questions! Last but not least, we wrote a helper function called answersCount in question.js so that we can display the number of existing answers (using {{questionsCount}}) inside the Answer button.  For good measure, we added a count of the total answers onto the nav bar using the count() function in layout.js to give us the number of data entries in our answers database.

	3.5 Upvoting
		We wanted to have a system of evaluating the answers, so we implemented the upvoting feature. We started off by adding two extra fields to every answer that was to be inserted into the database: upvoters[] that stores the people who voted and the var votes that stores the stores the number of votes. We then added an upvote button to answer.html and a corresponding event handler in answer.js that checks that you're logged in and calls a server side method to upvote the answer. Next, we went ahead and implemented the upvote method in lib/collections/comments.js. We borrowed the code for this from https://www.discovermeteor.com/blog/meteor-methods-client-side-operations/. The method prevents the same user from voting twice by checking if your username is already stored in upvoters[].

	3.6 Permissions
		Until now, there are no permission restrictions in our website. Everyone can answer questions, delete any question or answer, and upvote. 

		However, we only want Harvard students to be able to answer questions, and the easiest way to do that was to hide the form to submit an answer if the user was not registered with a harvard email. We wrote a helper function in answerpage.js called harvardStudent that acquired the current user's email with Meteor.user().emails[0].address, extracted the substring beginning at the "@", and checked if it matched "@college.harvard.edu". This allows us to use {{#if harvardStudent}} in answerpage.html to show the form only if the user passes the check. 

		In addition, we only want users to delete their own questions and answers, not other people's so we wrote helper functions called ownQuestion in question.js and ownAnswer in answer.js. Thesse functions simply checked if the id of the current logged in user mathed the userid that was stored in the question/answer, telling us if it belonged to the user. This allows us to use ((#if ownQuestion)) and ((#if ownAnswer)) in question.html and answer.html to hide the delete buttons if the question/answer didn't belong to the user. 

		Last but not least, we wrote a helper function called upvotedClass in comment.js that checked two things: if the user was logged in, and whether the username was already stored inside upvoters[]. This allows us to display a disabled version of the upvote button using {{upvotedClass}} inside the html tag of the upvote button. Although this feature is redundant with the check that is performed on the server side in the upvote method, it is better user interface to have a visual cue.
4. Style Decisions
	HTML:
	On a cursory level, the base layout for our program comes from bootstrap. Although we did not make heavy use of its functionalities, we choose to use twitter bootstrap because of the browser compatibility features it provides.
	In terms of the design itself, our html structure follows the structures implemented by Facebook, Twitter and Askfm. Specifically, we noticed that all of these sites assign a class to each element, and subsequently group elements into class groups. This mechanism offers both control on a group of elements and minute manipulation on the aesthtics of any given object. To this end, we divided the mainpage.html, homepage.html and answerpage.html into a background and body id. The background id always loads the background image, and enables the posterior manipulation of its format by means of the id. The body ID holds all the remaining objects, each of which is assigned to a class depending on nearby objects.
	CSS:
	We chose to consolidate our design into a single stylesheet, since our ID and class system offers precise control on the objects we want to manipulate. The stylesheet is ordered to represent the overall flow of the website. It contains the formatting for the Main Page first, the formatting for the Home Page second and the formatting of the Answer Page third. 
	We included cross-browser support by means of -webkit-, -moz- and -o- tags; however, we did not add mobile browser compatibility.
	


